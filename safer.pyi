from _typeshed import Incomplete
from collections.abc import Generator
from pathlib import Path
from typing import Callable, IO, Optional, Union

def writer(stream: Union[Callable, None, IO, Path, str] = ..., is_binary: Optional[bool] = ..., close_on_exit: bool = ..., temp_file: bool = ..., chunk_size: int = ..., delete_failures: bool = ..., dry_run: Union[bool, Callable] = ..., enabled: bool = ...) -> Union[Callable, IO]: ...
def open(name: Union[Path, str], mode: str = ..., buffering: int = ..., encoding: Optional[str] = ..., errors: Optional[str] = ..., newline: Optional[str] = ..., closefd: bool = ..., opener: Optional[Callable] = ..., make_parents: bool = ..., delete_failures: bool = ..., temp_file: bool = ..., dry_run: Union[bool, Callable] = ..., enabled: bool = ...) -> IO: ...
def closer(stream, is_binary: Incomplete | None = ..., close_on_exit: bool = ..., **kwds): ...
def dump(obj, stream: Incomplete | None = ..., dump: Incomplete | None = ..., **kwargs): ...
def printer(name, mode: str = ..., *args, **kwargs) -> Generator[Incomplete, None, None]: ...
